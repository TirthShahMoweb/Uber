"""
Django settings for Uber project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import os
from datetime import timedelta
from decimal import Decimal
from pathlib import Path

from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent

# logging.basicConfig(
#     level=logging.ERROR,  # Choose the log level
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
# )

logger = logging.getLogger(__name__)  # Create a logger object

CRON_LOG_FILENAME = os.path.join(BASE_DIR, "log/cron.log")
ERROR_LOG_FILENAME = os.path.join(BASE_DIR, "log/error.log")

BASE_URL = os.getenv(
    "BASE_URL", "http://localhost:8000"
)  # Uses env variable if available

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            "format": "%(name)-12s %(levelname)-8s %(message)s",
        },
        "file": {
            "format": "%(asctime)s  %(name)-12s %(levelname)-8s %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console",
        },
        "file": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "formatter": "file",
            "filename": ERROR_LOG_FILENAME,
        },
        "cron_file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "formatter": "file",
            "filename": CRON_LOG_FILENAME,
        },
    },
    "loggers": {
        "": {
            "level": "DEBUG",
            "handlers": ["console", "file"],
        },
        "cron_logger": {
            "level": "INFO",
            "handlers": ["cron_file"],
            "propagate": False,
        },
    },
}
# Build paths inside the project like this: BASE_DIR / 'subdir'.

open_route_service_key = "5b3ce3597851110001cf624850c190f4ff394eb4a83c14300af5c636"

# settings.py
TIME_ZONE = "Asia/Kolkata"
USE_TZ = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECRET_KEY = config('SECRET_KEY')
# DEBUG = config('DEBUG', cast=bool, default=False)
# ALLOWED_HOSTS = config('ALLOWED_HOSTS').split(',')

SECRET_KEY = "django-insecure-h7*4q*549%@sbg#e@n7dgoc8#b%y6a!86jc0!94+6&kk7l!_m4"

DEBUG = True

ALLOWED_HOSTS = ["*"]

AUTH_USER_MODEL = "user.User"

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "user",
    "vehicle",
    "drf_yasg",
    "corsheaders",
    "drf_api_logger",
    "django_filters",
    "channels",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware",
]

ROOT_URLCONF = "Uber.urls"

CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://192.168.50.18:8000",
]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = 'Uber.wsgi.application'
ASGI_APPLICATION = "Uber.asgi.application"

DRF_API_LOGGER_DATABASE = True

# Database
# https:/docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "Uber",
        "USER": "postgres",
        "PASSWORD": "tirth",
        "HOST": "localhost",  # or your PostgreSQL server IP
        "PORT": "5432",  # Default PostgreSQL port
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': config('DB_ENGINE'),
#         'NAME': config('DB_NAME'),
#         'USER': config('DB_USER'),
#         'PASSWORD': config('DB_PASSWORD'),
#         'HOST': config('DB_HOST'),
#         'PORT': config('DB_PORT'),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"
USE_TZ = True

# USE_I18N = True

# USE_TZ = True

# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "/media/"


MEDIA_ROOT = os.path.join(BASE_DIR, "media")
COMMISSION_PERCENTAGE = Decimal(0.2)

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 8,
}

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"]
}


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "tirth.web.moweb@gmail.com"
EMAIL_HOST_PASSWORD = "dtoumtcmtoyfsucc"


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=3),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

# CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Or RabbitMQ
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": 'JWT Authorization header using the Bearer scheme. Example: "Bearer <token>"',
        }
    },
}

CRONJOBS = [("*/1 * * * *", "Uber.cron.print_hello")]

# EMAIL_BACKEND = config('EMAIL_BACKEND')
# EMAIL_HOST = config('EMAIL_HOST')
# EMAIL_PORT = config('EMAIL_PORT', cast=int)
# EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
# EMAIL_HOST_USER = config('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(hours=config('ACCESS_TOKEN_LIFETIME_HOURS', cast=int)),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=config('REFRESH_TOKEN_LIFETIME_DAYS', cast=int)),
# }
